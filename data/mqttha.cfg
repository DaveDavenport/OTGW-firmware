// Configuration topic no1: homeassistant/sensor/<name node>/config
// Configuration Payload no1:  {"name": "flame", "state_topic": "OTGW/flame"}
homeassistant/binary_sensor/OTGW/flame/config , {"name": "flame", "state_topic": "OTGW/flame"}
homeassistant/binary_sensor/OTGW/centralheating/config , {"name": "centralheating", "state_topic": "OTGW/centralheating"}
homeassistant/binary_sensor/OTGW/cooling/config , {"name": "cooling", "state_topic": "OTGW/cooling"}
homeassistant/binary_sensor/OTGW/centralheating2/config , {"name": "centralheating2", "state_topic": "OTGW/centralheating2"}
homeassistant/binary_sensor/OTGW/diagnostic_indicator/config , {"name": "diagnostic_indicator", "state_topic": "OTGW/diagnostic_indicator"}

// Configuration topic no2: homeassistant/sensor/<name node>/config
// Configuration payload no1: {"device_class": "temperature", "name": "Temperature", "state_topic": "OTGW/<sensor name>>", "unit_of_measurement": "°C", "value_template": "{{ value_json.temperature}}" }
homeassistant/sensor/OTGW/TSet/config , {"device_class": "temperature", "name": "Control setpoint", "state_topic": "OTGW/TSet", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/TsetCH2/config , {"device_class": "temperature", "name": "Control setpoint for 2e circuit", "state_topic": "OTGW/TsetCH2", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/TrOverride/config , {"device_class": "temperature", "name": "Remote override room setpoint", "state_topic": "OTGW/TrOverride", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/TrSet/config , {"device_class": "temperature", "name": "Room setpoint", "state_topic": "OTGW/TrSet", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Troom/config , {"device_class": "temperature", "name": "Room Temperature", "state_topic": "OTGW/Troom", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tboiler/config , {"device_class": "temperature", "name": "Boiler flow water temperature", "state_topic": "OTGW/Tboiler", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tdhw/config , {"device_class": "temperature", "name": "DHW temperature", "state_topic": "OTGW/Tdhw", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Toutside/config , {"device_class": "temperature", "name": "Outside Temperature", "state_topic": "OTGW/Toutside", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tret/config , {"device_class": "temperature", "name": "Return water temperature", "state_topic": "OTGW/Tret", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tstorage/config , {"device_class": "temperature", "name": "Solar storage temperature", "state_topic": "OTGW/Tstorage", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tcollector/config , {"device_class": "temperature", "name": "Solar collector temperature", "state_topic": "OTGW/Tcollector", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/TflowCH2/config , {"device_class": "temperature", "name": "Flow water temperature CH2 cir.", "state_topic": "OTGW/TflowCH2", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Tdhw2/config , {"device_class": "temperature", "name": "Domestic hot water temperature 2", "state_topic": "OTGW/Tdhw2", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/Texhaust/config , {"device_class": "temperature", "name": "Boiler exhaust temperature", "state_topic": "OTGW/Texhaust", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/TdhwSet/config , {"device_class": "temperature", "name": "DHW setpoint", "state_topic": "OTGW/TdhwSet", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }
homeassistant/sensor/OTGW/MaxTSet/config , {"device_class": "temperature", "name": "Max CH water setpoint", "state_topic": "OTGW/MaxTSet", "unit_of_measurement": "°C", "value_template": "{{ value_json.value}}" }

  

  // case CoolingControl:            print_f88(OTdata.CoolingControl,                        "Cooling control signal","%");   break;
  // case MaxRelModLevelSetting:     print_f88(OTdata.MaxRelModLevelSetting,                 "Max Rel Modulation level setting","%");  break;
  // case RelModLevel:               print_f88(OTdata.RelModLevel,                           "Relative Modulation Level","%");  break;
  // case CHPressure:                print_f88(OTdata.CHPressure,                            "Water pressure in CH circuit","bar"); break;
  // case DHWFlowRate:               print_f88(OTdata.DHWFlowRate,                           "Water flow rate in DHW circuit","l/min");  break;
  // case Hcratio:                   print_f88(OTdata.Hcratio,                               "OTC heat curve ratio","°C");  break;
  // case OpenThermVersionMaster:    print_f88(OTdata.OpenThermVersionMaster,                "Master OT protocol version","");  break;
  // case OpenThermVersionSlave:     print_f88(OTdata.OpenThermVersionSlave,                 "Slave OT protocol version","");  break;
  // case Status:                    print_status(OTdata.Status,                             "Status",""); break;
  // case ASFflags:                  print_ASFflags(OTdata.ASFflags,                         "Application Specific Fault",""); break;
  // case MConfigMMemberIDcode:      print_flag8u8(OTdata.MConfigMMemberIDcode,              "Master Config / Member ID", ""); break; // flag8 / u8  Master Configuration Flags /  Master MemberID Code 
  // case SConfigSMemberIDcode:      print_flag8u8(OTdata.SConfigSMemberIDcode,              "Slave  Config / Member ID", ""); break; // flag8 / u8  Slave Configuration Flags /  Slave MemberID Code  
  // case Command:                   print_u8u8(OTdata.Command,                              "Command","");  break; // u8 / u8  Remote Command 
  // case RBPflags:                  print_flag8flag8(OTdata.RBPflags,                       "RBPflags", ""); break; // flag8 / flag8  Remote boiler parameter transfer-enable & read/write flags 
  // case TSP:                       print_u8u8(OTdata.TSP,                                  "Nr of Transp. Slave Parameters", ""); break; // u8 / u8  Number of Transparent-Slave-Parameters supported by slave 
  // case TSPindexTSPvalue:          print_u8u8(OTdata.TSPindexTSPvalue,                     "TSPindexTSPvalue", "");  break; // u8 / u8  Index number / Value of referred-to transparent slave parameter. 
  // case FHBsize:                   print_u8u8(OTdata.FHBsize,                              "FHBsize", "");  break;  // u8 / u8  Size of Fault-History-Buffer supported by slave 
  // case FHBindexFHBvalue:          print_u8u8(OTdata.FHBindexFHBvalue,                     "FHBindexFHBvalue", "");  break;  // u8 / u8  Index number / Value of referred-to fault-history buffer entry. 
  // case MaxCapacityMinModLevel:    print_u8u8(OTdata.MaxCapacityMinModLevel,               "MaxCapacityMinModLevel", "");  break;  // u8 / u8  Maximum boiler capacity (kW) / Minimum boiler modulation level(%) 
  // case DayTime:                   print_daytime(OTdata.DayTime,                           "Day of Week - Daytime (hour/min)", "");  break; // special / u8  Day of Week and Time of Day 
  // case Date:                      print_u8u8(OTdata.Date,                                 "Date (Month/Day)", "");  break; // u8 / u8  Calendar date 
  // case Year:                      print_u16(OTdata.Year,                                  "Year","");  break; // u16  Calendar year 
  // case TdhwSetUBTdhwSetLB:        print_s8s8(OTdata.TdhwSetUBTdhwSetLB,                   "TdhwSetUBTdhwSetLB", "°C"); break;  // s8 / s8  DHW setpoint upper & lower bounds for adjustment  (°C)
  // case MaxTSetUBMaxTSetLB:        print_s8s8(OTdata.MaxTSetUBMaxTSetLB,                   "MaxTSetUBMaxTSetLB", "°C"); break;  // s8 / s8  Max CH water setpoint upper & lower bounds for adjustment  (°C)
  // case HcratioUBHcratioLB:        print_s8s8(OTdata.HcratioUBHcratioLB,                   "HcratioUBHcratioLB", ""); break;  // s8 / s8  OTC heat curve ratio upper & lower bounds for adjustment  
  // case RemoteOverrideFunction:    print_flag8(OTdata.RemoteOverrideFunction,              "RemoteOverrideFunction", ""); break; // u8 / flag8 -  Function of manual and program changes in master and remote room setpoint. 
  // case OEMDiagnosticCode:         print_u16(OTdata.OEMDiagnosticCode,                     "OEM diagnostic/service code","");  break; // u16  OEM-specific diagnostic/service code 
  // case BurnerStarts:              print_u16(OTdata.BurnerStarts,                          "Nr of starts burner","");  break; // u16  Number of starts burner 
  // case CHPumpStarts:              print_u16(OTdata.CHPumpStarts,                          "Nr of starts CH pump","");  break; // u16  Number of starts CH pump 
  // case DHWPumpValveStarts:        print_u16(OTdata.DHWPumpValveStarts,                    "Nr of starts DHW pump/valve","");  break; // u16  Number of starts DHW pump/valve
  // case DHWBurnerStarts:           print_u16(OTdata.DHWBurnerStarts,                       "Nr of starts burner during DHW","");  break; // u16  Number of starts burner during DHW mode 
  // case BurnerOperationHours:      print_u16(OTdata.BurnerOperationHours,                  "Nr of hours burner operation","");  break; // u16  Number of hours that burner is in operation (i.e. flame on) 
  // case CHPumpOperationHours:      print_u16(OTdata.CHPumpOperationHours,                  "Nr of hours CH pump running","");  break; // u16  Number of hours that CH pump has been running 
  // case DHWPumpValveOperationHours:print_u16(OTdata.DHWPumpValveOperationHours,            "Nr of hours DHW valve open","");  break; // u16  Number of hours that DHW pump has been running or DHW valve has been opened 
  // case DHWBurnerOperationHours:   print_u16(OTdata.DHWBurnerOperationHours,               "Nr of hours burner operation DHW","");  break; // u16  Number of hours that burner is in operation during DHW mode 
  // case MasterVersion:             print_u8u8(OTdata.MasterVersion,                        "MasterVersion (version/type)","" ); break;// u8 / u8  Master product version number and type 
  // case SlaveVersion:              print_u8u8(OTdata.SlaveVersion,                         "SlaveVersion  (version/type)", ""); break;/
